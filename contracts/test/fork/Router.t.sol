// SPDX-License-Identifier: MIT
pragma solidity =0.8.26;

import "forge-std/src/Test.sol";

import {ERC20} from "solmate/src/tokens/ERC20.sol";

import {Swap} from "./Swap.sol";

contract Router_Test is Test {
    function test_swap() public {
        address shafu = 0x0fd661f9449d54fbFa512e09Fd1C00bA0C0a9935;
        uint256 amount = 4173840;

        ERC20 usdc = ERC20(0x0b2C639c533813f4Aa9D7837CAf62653d097Ff85);

        bytes memory DATA = "0x2213bc0b00000000000000000000000070ca548cf343b63e5b0542f0f3ec84c61ca1086f0000000000000000000000000b2c639c533813f4aa9d7837caf62653d097ff8500000000000000000000000000000000000000000000000000000000003fb01000000000000000000000000070ca548cf343b63e5b0542f0f3ec84c61ca1086f00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000004c41fff991f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0a1db6f1655eca5d741a7462b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000002e000000000000000000000000000000000000000000000000000000000000000e4c1fb425e00000000000000000000000070ca548cf343b63e5b0542f0f3ec84c61ca1086f0000000000000000000000000b2c639c533813f4aa9d7837caf62653d097ff8500000000000000000000000000000000000000000000000000000000003fb0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006775493100000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012438c9c1470000000000000000000000000b2c639c533813f4aa9d7837caf62653d097ff85000000000000000000000000000000000000000000000000000000000000000f0000000000000000000000000b2c639c533813f4aa9d7837caf62653d097ff85000000000000000000000000000000000000000000000000000000000000002400000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000044a9059cbb000000000000000000000000ad01c20d5886137e056775af56915de824c8fce50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e48d68a1560000000000000000000000000fd661f9449d54fbfa512e09fd1c00ba0c0a9935000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000004650ebd717a84000000000000000000000000000000000000000000000000000000000000002c0b2c639c533813f4aa9d7837caf62653d097ff8504000064420000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

        Swap swap = new Swap();

        console.log(block.number);
        console.log(block.timestamp);
        vm.warp(1735739374);

        vm.startPrank(shafu);
        usdc.approve(address(swap), amount);
        swap._swap(DATA, amount);
        vm.stopPrank();
    }

    receive() external payable {}
}